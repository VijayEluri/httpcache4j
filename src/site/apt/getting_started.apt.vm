 ------
 Getting Started
 ------
 Erlend Hamnaberg
 ------             

Getting started


 To start using httpcache4j immediately please do the following:
 
----------------------------------------
   <dependency>
     <groupId>org.codehaus.httpcache4j</groupId>
     <artifactId>httpcache4j-core</artifactId>
     <version>${currentVersion}</version>
   </dependency>

   <dependency>
     <groupId>org.codehaus.httpcache4j.resolvers</groupId>
     <artifactId>resolvers-httpcomponents-httpclient</artifactId>
     <version>${currentVersion}</version>
   </dependency>
----------------------------------------

  You then need to instantiate a HTTPCache with a storage back-end and a response resolver. 

----------------------------------------
HTTPCache cache = new HTTPCache(
  new MemoryCacheStorage(),
  HTTPClientResponseResolver.createMultithreadedInstance()
);
----------------------------------------

  The cache is now ready to use and can serve / resolve requests

  Normal usage would be

----------------------------------------
HTTPRequest request = new HTTPRequest(URI.create("http://tools.ietf.org/html/rfc2616"));
HTTPResponse response = null;
try {
  response = cache.doCachedRequest(request);
  //Do something with the response.
} finallyÂ {
  if (response != null) {
    response.consume();
  }
}
----------------------------------------

  The cache will then perform a HTTP GET to "http://tools.ietf.org/html/rfc2616" and cache this if possible.
  A following request will lookup the cached item from storage and serve this if the cached entry is fresh.
  Make sure that you consume the response when you are done with it, regardless if you read the payload or not.

  If you want to bypass the cache, but still want the response to be cached, you can use

---------------------------------------- 
cache.refreshCachedRequest(request);
----------------------------------------

 This works like the browser ctrl + F5 (Firefox); force a refresh.
