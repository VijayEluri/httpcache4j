 ------
 Getting Started
 ------
 Erlend Hamnaberg
 ------             

Getting started


 To start using httpcache4j immediately please do the following:
 
----------------------------------------
   <dependency>
     <groupId>org.codehaus.httpcache4j</groupId>
     <artifactId>httpcache4j-core</artifactId>
     <version>${currentVersion}</version>
   </dependency>

   <dependency>
     <groupId>org.codehaus.httpcache4j.resolvers</groupId>
     <artifactId>resolvers-commons-httpclient</artifactId>
     <version>${currentVersion}</version>
   </dependency>
----------------------------------------

  You then need to instantiate a HTTPCache with a storage back-end and a response resolver. 

----------------------------------------
CacheStorage storage = new MemoryCacheStorage()
HTTPCache cache = new HTTPCache(
  storage,
  new HTTPClientResolver(
    new HttpClient(), 
    new DefaultResponseCreator(SystemUtils.getJavaIoTmpDir(), storage)
);
----------------------------------------

  The cache is now ready to use and can serve / resolve requests

  Normal usage would be

----------------------------------------
HTTPRequest request = new HTTPRequest(URI.create("http://www.vg.no/"));
cache.doCachedRequest(request);
----------------------------------------

 The cache will then perform a HTTP GET to http://www.vg.no and cache this if possible.
 The next request will then be served from the cache, if the TTL has not exipired.
 If you want to bypass the cache, but still want the response to be cached, you can use

---------------------------------------- 
cache.doCachedRequest(request, true);
----------------------------------------

 This works like the browser ctrl + F5 (Firefox); force a refresh.